import asyncio
from aiogram import F, Router
from aiogram.types import Message
from aiogram.filters import Command
from AI import redis_client, context_manager

router = Router()


@router.message(Command("start"))
async def handler_start(message: Message):
    full_name = message.from_user.full_name if message.from_user.full_name else "–ü—Ä–∏–≤–µ—Ç"
    greeting = f"üëã <b>{full_name}</b>!\n\n"
    description = (
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ–±—â–∞—Ç—å—Å—è —Å AI. –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é:\n\n"
        "‚öôÔ∏è <b>/start</b> –∏–ª–∏ <b>/info</b> ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "üßπ <b>/clear</b> ‚Äî –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å!\n"
        "‚ö†Ô∏è –ó–∞–º–µ—á–∞–Ω–∏–µ: –ü–æ–∫–∞ —è –≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç, –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã."
    )

    await message.reply(greeting + description, parse_mode="HTML")


@router.message(Command("clear"))
async def handler_clear(message: Message):
    await redis_client.clear_context(message.from_user.id)
    await message.reply("<b>–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω</b> üßπ", parse_mode="HTML")


@router.message(F.text)
async def handler_request(message: Message):
    loading_message = await message.reply("<b>–ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è</b>", parse_mode="HTML")
    try:
        response_task = asyncio.create_task(
            context_manager.get_response_with_context(
                message.from_user.id, message.text.strip()
            )
        )

        k = 0
        while not response_task.done():
            if k == 3:
                new_text = f"<b>{loading_message.text[:-6]}</b>"
                k = 0
            else:
                new_text = f"<b>{loading_message.text} .</b>"
                k += 1
            loading_message = await loading_message.edit_text(
                new_text, parse_mode="HTML"
            )
            await asyncio.sleep(0.3)

        response = await context_manager.get_response_with_context(
            message.from_user.id, message.text.strip()
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        await loading_message.edit_text(response, parse_mode="Markdown")

    except Exception as e:
        await loading_message.edit_text(
            "<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞</b> ‚ö†Ô∏è", parse_mode="HTML"
        )
        print(f"Error: {e}")
